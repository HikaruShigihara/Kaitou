/*!
@file GameStage.cpp
@brief ゲームステージ実体
*/

#include "stdafx.h"
#include "Project.h"

namespace basecross {

	//--------------------------------------------------------------------------------------
	//	ゲームステージクラス実体
	//--------------------------------------------------------------------------------------
	void GameStage::CreateViewLight() {
		const Vec3 eye(0.0f, 5.0f, -5.0f);
		const Vec3 at(0.0f);
		auto PtrView = CreateView<SingleView>();
		//ビューのカメラの設定
		auto PtrCamera = ObjectFactory::Create<Camera>();
		PtrView->SetCamera(PtrCamera);
		PtrCamera->SetEye(eye);
		PtrCamera->SetAt(at);
		//マルチライトの作成
		auto PtrMultiLight = CreateLight<MultiLight>();
		//デフォルトのライティングを指定
		PtrMultiLight->SetDefaultLighting();
	}

	//--------------------------------------------------------------------------------------
	//	class MoveBox : public GameObject;
	//--------------------------------------------------------------------------------------
	//構築と破棄
	MoveBox::MoveBox(const shared_ptr<Stage>& StagePtr,
		const Vec3& Scale,
		const Vec3& Rotation,
		const Vec3& Position
	) :
		GameObject(StagePtr),
		m_Scale(Scale),
		m_Rotation(Rotation),
		m_Position(Position)
	{
	}
	MoveBox::~MoveBox() {}

	//初期化
	void MoveBox::OnCreate() {
		auto ptrTransform = GetComponent<Transform>();
		ptrTransform->SetScale(m_Scale);
		ptrTransform->SetRotation(m_Rotation);
		ptrTransform->SetPosition(m_Position);
		//OBB衝突j判定を付ける
		auto ptrColl = AddComponent<CollisionObb>();
		ptrColl->SetSleepActive(true);
		//重力をつける
		auto ptrGra = AddComponent<Gravity>();
		//影をつける
		auto shadowPtr = AddComponent<Shadowmap>();
		shadowPtr->SetMeshResource(L"DEFAULT_CUBE");
		//描画処理
		auto ptrDraw = AddComponent<BcPNTStaticDraw>();
		ptrDraw->SetFogEnabled(true);
		ptrDraw->SetMeshResource(L"DEFAULT_CUBE");
		ptrDraw->SetTextureResource(L"WALL_TX");
		ptrDraw->SetOwnShadowActive(true);
	}

	void GameStage::CreateXmlObjects() {
		auto group = CreateSharedObjectGroup(L"SeekGroup");
		auto CellmapNode = m_XmlDocReader->GetSelectSingleNode(L"field/maps");
		if (!CellmapNode) {
			throw BaseException(
				L"GameStage/CellMapが見つかりません",
				L"if (!CellmapNode)",
				L"GameStage::CreateEnemy()"
			);
		}

		auto Depth = m_XmlDocReader->GetSelectSingleNode(L"depth");
		auto Width = m_XmlDocReader->GetSelectSingleNode(L"width");

		
		wstring MapStr = XmlDocReader::GetText(CellmapNode);
		vector<wstring> LineVec;
		//最初に「改行」をデリミタとした文字列の配列にする
		Util::WStrToTokenVector(LineVec, MapStr, L'\n');

		for (int z = 0; z < Depth; z++) {
			//トークン（カラム）の配列
			vector<wstring> Tokens;
			//トークン（カラム）単位で文字列を抽出(L','をデリミタとして区分け)
			Util::WStrToTokenVector(Tokens, LineVec[z], L',');

			for (int x = 0; x < Width; x++) {
				float XPos = (float)((int)x - 10);
				float ZPos = (float)(10 - (int)x);
				if (Tokens[x] == L"0") {
					AddGameObject<MoveBox>(
						Vec3(1.0f, 1.0f, 1.0f),
						Vec3(0.0f, 0.0f, 0.0f),
						Vec3(XPos, 0.5f, ZPos)
						);
					
				}
				else if (Tokens[x] == L"1") {
					AddGameObject<MoveBox>(
						Vec3(1.0f, 1.0f, 1.0f),
						Vec3(0.0f, 0.0f, 0.0f),
						Vec3(XPos, 0.5f, ZPos)
						);


				}

				else if (Tokens[x] == L"2") {
					AddGameObject<MoveBox>(
						Vec3(1.0f, 1.0f, 1.0f),
						Vec3(0.0f, 0.0f, 0.0f),
						Vec3(XPos, 0.5f, ZPos)
						);

				}

			}
		}
	}
	void GameStage::OnCreate() {
		try {
			wstring DataDir;
			App::GetApp()->GetDataDirectory(DataDir);
			//XMLの読み込み
			m_XmlDocReader.reset(new XmlDocReader(DataDir + L"xml/test2.xml"));

			//ビューとライトの作成
			CreateViewLight();
			CreateXmlObjects();
		}
		catch (...) {
			throw;
		}
	}

}
//end basecross
